import telebot
from telebot import types
import os
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = telebot.TeleBot(os.getenv('TELEGRAM_BOT_TOKEN'))

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
history = []

# –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
SUPPORTED_LANGUAGES = {
    "python": "Python",
    "js": "JavaScript",
    "java": "Java",
    "cpp": "C++",
    "html": "HTML",
    "css": "CSS",
    "php": "PHP",
    "ruby": "Ruby",
    "go": "Go",
    "swift": "Swift",
    "sql": "SQL",
    "bash": "Bash",
    "json": "JSON",
    "xml": "XML",
}

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
UPLOAD_FOLDER = "uploads"
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def create_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton("/sendcode")
    btn2 = types.KeyboardButton("/sendfile")
    btn3 = types.KeyboardButton("/history")
    btn4 = types.KeyboardButton("/sendmessage")
    markup.add(btn1, btn2, btn3, btn4)
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=create_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sendcode
@bot.message_handler(commands=['sendcode'])
def send_code(message):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for lang in SUPPORTED_LANGUAGES.values():
        markup.add(lang)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, get_language)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
def get_language(message):
    language = message.text
    if language not in SUPPORTED_LANGUAGES.values():
        bot.send_message(message.chat.id, "–Ø–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return send_code(message)
    user_data[message.chat.id] = {'language': language}
    bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {language}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥:")
    bot.register_next_step_handler(message, get_code)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
def get_code(message):
    code = message.text
    user_data[message.chat.id]['code'] = code
    language = user_data[message.chat.id]['language']
    username = message.from_user.username

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
    message_to_creator = (
        f"–ù–æ–≤—ã–π –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}:\n"
        f"–Ø–∑—ã–∫: {language}\n"
        f"–ö–æ–¥:\n```{code}```"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
    creator_chat_id = os.getenv('CREATOR_CHAT_ID')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot.send_message(creator_chat_id, message_to_creator, parse_mode="Markdown")
    bot.send_message(message.chat.id, "–í–∞—à –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª—é. –°–ø–∞—Å–∏–±–æ!", reply_markup=create_keyboard())

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    history.append({
        'type': 'code',
        'username': username,
        'language': language,
        'code': code,
        'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sendfile
@bot.message_handler(commands=['sendfile'])
def send_file(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—é.")
    bot.register_next_step_handler(message, handle_file)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
def handle_file(message):
    if message.document:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_name = message.document.file_name
        file_path = os.path.join(UPLOAD_FOLDER, file_name)
        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å–æ–∑–¥–∞—Ç–µ–ª—é
        creator_chat_id = os.getenv('CREATOR_CHAT_ID')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        username = message.from_user.username
        bot.send_document(creator_chat_id, open(file_path, 'rb'), caption=f"–§–∞–π–ª –æ—Ç @{username}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(message.chat.id, "–í–∞—à —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª—é. –°–ø–∞—Å–∏–±–æ!", reply_markup=create_keyboard())

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        history.append({
            'type': 'file',
            'username': username,
            'file_name': file_name,
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.", reply_markup=create_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history
@bot.message_handler(commands=['history'])
def show_history(message):
    if not history:
        bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=create_keyboard())
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    history_message = "–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤:\n\n"
    for entry in history:
        if entry['type'] == 'code':
            history_message += (
                f"üìù –ö–æ–¥ –æ—Ç @{entry['username']}\n"
                f"–Ø–∑—ã–∫: {entry['language']}\n"
                f"–í—Ä–µ–º—è: {entry['timestamp']}\n"
                f"–ö–æ–¥:\n```{entry['code']}```\n\n"
            )
        elif entry['type'] == 'file':
            history_message += (
                f"üìÅ –§–∞–π–ª –æ—Ç @{entry['username']}\n"
                f"–ò–º—è —Ñ–∞–π–ª–∞: {entry['file_name']}\n"
                f"–í—Ä–µ–º—è: {entry['timestamp']}\n\n"
            )

    bot.send_message(message.chat.id, history_message, parse_mode="Markdown", reply_markup=create_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sendmessage
@bot.message_handler(commands=['sendmessage'])
def send_message_command(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—é:")
    bot.register_next_step_handler(message, handle_send_message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def handle_send_message(message):
    user_message = message.text
    username = message.from_user.username
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
    message_to_creator = (
        f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}:\n"
        f"–í—Ä–µ–º—è: {timestamp}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{user_message}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
    creator_chat_id = os.getenv('CREATOR_CHAT_ID')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot.send_message(creator_chat_id, message_to_creator)
    bot.send_message(message.chat.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é. –°–ø–∞—Å–∏–±–æ!", reply_markup=create_keyboard())

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    history.append({
        'type': 'message',
        'username': username,
        'message': user_message,
        'timestamp': timestamp
    })

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True)
