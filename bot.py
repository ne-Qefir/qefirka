import telebot
from telebot import types
import os
from datetime import datetime
from dotenv import load_dotenv
import random

# –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = telebot.TeleBot(os.getenv('TELEGRAM_BOT_TOKEN'))

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
history = []

# –°—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
message_count = 0

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä
game_stats = {
    "total_games": 0,
    "wins": 0,
    "losses": 0,
}

# –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
SUPPORTED_LANGUAGES = {
    "python": "üêç Python",
    "js": "üü® JavaScript",
    "java": "‚òï Java",
    "cpp": "üîµ C++",
    "html": "üåê HTML",
    "css": "üé® CSS",
    "php": "üêò PHP",
    "ruby": "üíé Ruby",
    "go": "üêπ Go",
    "swift": "üê¶ Swift",
    "sql": "üóÉÔ∏è SQL",
    "bash": "üêö Bash",
    "json": "üìÑ JSON",
    "xml": "üìú XML",
}

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
UPLOAD_FOLDER = "uploads"
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥")
    btn2 = types.KeyboardButton("üìÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª")
    btn3 = types.KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è")
    btn4 = types.KeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    btn5 = types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    btn6 = types.KeyboardButton("üéÆ –ò–≥—Ä—ã")
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    global message_count
    if message.text == "üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥":
        send_code(message)
    elif message.text == "üìÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª":
        send_file(message)
    elif message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è":
        show_history(message)
    elif message.text == "üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ":
        send_message_to_user(message)
    elif message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        get_info(message)
    elif message.text == "üéÆ –ò–≥—Ä—ã":
        start_game_menu(message)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sendcode (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)
def send_code(message):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for lang in SUPPORTED_LANGUAGES.values():
        markup.add(lang)
    bot.send_message(message.chat.id, "üìù –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, get_language)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
def get_language(message):
    language = message.text
    if language not in SUPPORTED_LANGUAGES.values():
        bot.send_message(message.chat.id, "‚ùå –Ø–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return send_code(message)
    user_data[message.chat.id] = {'language': language}
    bot.send_message(message.chat.id, f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ {language}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥:")
    bot.register_next_step_handler(message, get_code)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
def get_code(message):
    global message_count
    code = message.text
    user_data[message.chat.id]['code'] = code
    language = user_data[message.chat.id]['language']
    username = message.from_user.username

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
    message_to_creator = (
        f"üì© –ù–æ–≤—ã–π –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}:\n"
        f"üìù –Ø–∑—ã–∫: {language}\n"
        f"üíª –ö–æ–¥:\n```{code}```"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
    creator_chat_id = os.getenv('CREATOR_CHAT_ID')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot.send_message(creator_chat_id, message_to_creator, parse_mode="Markdown")
    bot.send_message(message.chat.id, "‚úÖ –í–∞—à –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª—é. –°–ø–∞—Å–∏–±–æ!")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    history.append({
        'type': 'code',
        'username': username,
        'language': language,
        'code': code,
        'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    message_count += 1

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sendfile (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)
def send_file(message):
    bot.send_message(message.chat.id, "üìÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—é.")
    bot.register_next_step_handler(message, handle_file)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
def handle_file(message):
    global message_count
    if message.document:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_name = message.document.file_name
        file_path = os.path.join(UPLOAD_FOLDER, file_name)
        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å–æ–∑–¥–∞—Ç–µ–ª—é
        creator_chat_id = os.getenv('CREATOR_CHAT_ID')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        username = message.from_user.username
        bot.send_document(creator_chat_id, open(file_path, 'rb'), caption=f"üìÅ –§–∞–π–ª –æ—Ç @{username}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(message.chat.id, "‚úÖ –í–∞—à —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª—é. –°–ø–∞—Å–∏–±–æ!")

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        history.append({
            'type': 'file',
            'username': username,
            'file_name': file_name,
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        message_count += 1
    else:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)
def show_history(message):
    if not history:
        bot.send_message(message.chat.id, "üìú –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    history_message = "üìú –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤:\n\n"
    for entry in history:
        if entry['type'] == 'code':
            history_message += (
                f"üìù –ö–æ–¥ –æ—Ç @{entry['username']}\n"
                f"üìù –Ø–∑—ã–∫: {entry['language']}\n"
                f"üïí –í—Ä–µ–º—è: {entry['timestamp']}\n"
                f"üíª –ö–æ–¥:\n```{entry['code']}```\n\n"
            )
        elif entry['type'] == 'file':
            history_message += (
                f"üìÅ –§–∞–π–ª –æ—Ç @{entry['username']}\n"
                f"üìÑ –ò–º—è —Ñ–∞–π–ª–∞: {entry['file_name']}\n"
                f"üïí –í—Ä–µ–º—è: {entry['timestamp']}\n\n"
            )

    bot.send_message(message.chat.id, history_message, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sendmessage (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)
def send_message_to_user(message):
    if str(message.chat.id) != os.getenv('CREATOR_CHAT_ID'):
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é.")
        return

    bot.send_message(message.chat.id, "üì© –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    bot.register_next_step_handler(message, get_username_for_message)

def get_username_for_message(message):
    username = message.text
    if not username.startswith('@'):
        username = '@' + username
    user_data[message.chat.id] = {'username': username}
    bot.send_message(message.chat.id, f"üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:")
    bot.register_next_step_handler(message, get_message_for_user)

def get_message_for_user(message):
    global message_count
    user_message = message.text
    username = user_data[message.chat.id]['username']
    bot.send_message(message.chat.id, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}.")
    bot.send_message(username, f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è:\n{user_message}")

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    message_count += 1

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getinfo (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)
def get_info(message):
    global message_count, game_stats
    win_rate = (game_stats["wins"] / game_stats["total_games"] * 100) if game_stats["total_games"] > 0 else 0
    info_message = (
        f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n"
        f"üéÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä: {game_stats['total_games']}\n"
        f"üèÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥: {game_stats['wins']}\n"
        f"üíÄ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä–∞–∂–µ–Ω–∏–π: {game_stats['losses']}\n"
        f"üìà –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.2f}%"
    )
    bot.send_message(message.chat.id, info_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã üéÆ –ò–≥—Ä—ã
def start_game_menu(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("üéÆ –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏", callback_data="start_tic_tac_toe")
    markup.add(btn1)
    bot.send_message(message.chat.id, "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data == "start_tic_tac_toe":
        start_tic_tac_toe(call.message)
    elif call.data.startswith("ttt_"):
        process_tic_tac_toe(call)
    elif call.data == "exit_game":
        start(call.message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏
def start_tic_tac_toe(message):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    user_data[message.chat.id] = {
        "board": [" " for _ in range(9)],
        "player": "X",
        "bot": "O",
        "game_over": False,
    }
    show_tic_tac_toe_board(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
def show_tic_tac_toe_board(message):
    board = user_data[message.chat.id]["board"]
    markup = types.InlineKeyboardMarkup(row_width=3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä—è–¥–∞–º–∏ –ø–æ —Ç—Ä–∏
    for i in range(0, 9, 3):
        row = [
            types.InlineKeyboardButton(board[i], callback_data=f"ttt_{i}"),
            types.InlineKeyboardButton(board[i+1], callback_data=f"ttt_{i+1}"),
            types.InlineKeyboardButton(board[i+2], callback_data=f"ttt_{i+2}")
        ]
        markup.add(*row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
    exit_btn = types.InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data="exit_game")
    markup.add(exit_btn)
    
    bot.send_message(message.chat.id, "üéÆ –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏. –í–∞—à —Ö–æ–¥ (X):", reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö–æ–¥–∞ –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏
def process_tic_tac_toe(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    data = call.data.split("_")[1]
    index = int(data)

    if user_data.get(chat_id, {}).get("game_over", True):
        bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.")
        return

    board = user_data[chat_id]["board"]
    if board[index] != " ":
        bot.answer_callback_query(call.id, "–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!")
        return

    # –•–æ–¥ –∏–≥—Ä–æ–∫–∞
    board[index] = user_data[chat_id]["player"]
    if check_winner(board, user_data[chat_id]["player"]):
        user_data[chat_id]["game_over"] = True
        game_stats["total_games"] += 1
        game_stats["wins"] += 1
        bot.edit_message_text("üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!", chat_id, call.message.message_id)
        return

    if " " not in board:
        user_data[chat_id]["game_over"] = True
        game_stats["total_games"] += 1
        bot.edit_message_text("ü§ù –ù–∏—á—å—è!", chat_id, call.message.message_id)
        return

    # –•–æ–¥ –±–æ—Ç–∞
    bot_move = get_bot_move(board)
    board[bot_move] = user_data[chat_id]["bot"]
    if check_winner(board, user_data[chat_id]["bot"]):
        user_data[chat_id]["game_over"] = True
        game_stats["total_games"] += 1
        game_stats["losses"] += 1
        bot.edit_message_text("ü§ñ –ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª!", chat_id, call.message.message_id)
        return

    show_tic_tac_toe_board(call.message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
def check_winner(board, player):
    winning_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ
        [0, 4, 8], [2, 4, 6]              # –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ
    ]
    for combo in winning_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] == player:
            return True
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–æ–¥–∞ –±–æ—Ç–∞
def get_bot_move(board):
    empty_cells = [i for i, cell in enumerate(board) if cell == " "]
    return random.choice(empty_cells)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True)
